package com.example.webhookapp.service;

import org.springframework.stereotype.Service;

@Service
public class SqlProblemSolver {

    /**
     * Always return the SQL solution for Question 1
     */
    public String solveProblem() {
        return "SELECT " +
               "    p.AMOUNT AS SALARY, " +
               "    CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS NAME, " +
               "    FLOOR(DATEDIFF(CURDATE(), e.DOB) / 365.25) AS AGE, " +
               "    d.DEPARTMENT_NAME " +
               "FROM PAYMENTS p " +
               "INNER JOIN EMPLOYEE e ON p.EMP_ID = e.EMP_ID " +
               "INNER JOIN DEPARTMENT d ON e.DEPARTMENT = d.DEPARTMENT_ID " +
               "WHERE DAY(p.PAYMENT_TIME) != 1 " +
               "ORDER BY p.AMOUNT DESC " +
               "LIMIT 1";
    }
}
package com.example.webhookapp.service;

import com.example.webhookapp.dto.SolutionRequest;
import com.example.webhookapp.dto.WebhookRequest;
import com.example.webhookapp.dto.WebhookResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class WebhookService {

    private static final Logger logger = LoggerFactory.getLogger(WebhookService.class);

    private static final String GENERATE_WEBHOOK_URL =
            "https://bfhldevapigw.healthrx.co.in/hiring/generateWebhook/JAVA";

    @Autowired
    private SqlProblemSolver sqlProblemSolver;

    private final RestTemplate restTemplate;

    public WebhookService() {
        this.restTemplate = new RestTemplate();
    }

    /**
     * Generates webhook and returns response containing webhook URL and access token
     */
    public WebhookResponse generateWebhook(String name, String regNo, String email) { // ðŸ”¥ pass values here
        WebhookRequest request = new WebhookRequest(name, regNo, email); // ðŸ”¥ use your values

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<WebhookRequest> entity = new HttpEntity<>(request, headers);

        try {
            logger.info("Generating webhook...");
            ResponseEntity<WebhookResponse> response = restTemplate.postForEntity(
                    GENERATE_WEBHOOK_URL, entity, WebhookResponse.class);

            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                logger.info("Webhook generated successfully");
                return response.getBody();
            } else {
                throw new RuntimeException("Failed to generate webhook: " + response.getStatusCode());
            }
        } catch (Exception e) {
            throw new RuntimeException("Error generating webhook", e);
        }
    }

    /**
     * Submits the SQL solution to the webhook
     */
    public void submitSolution(String sqlQuery, String accessToken, String webhookUrl) { // ðŸ”¥ now uses dynamic webhook
        SolutionRequest solutionRequest = new SolutionRequest(sqlQuery);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setBearerAuth(accessToken);

        HttpEntity<SolutionRequest> entity = new HttpEntity<>(solutionRequest, headers);

        try {
            logger.info("Submitting solution...");
            ResponseEntity<String> response = restTemplate.postForEntity(
                    webhookUrl, entity, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                logger.info("Solution submitted successfully: {}", response.getBody());
            } else {
                logger.error("Failed to submit solution: {}", response.getStatusCode());
            }
        } catch (Exception e) {
            logger.error("Error submitting solution: {}", e.getMessage());
        }
    }

    /**
     * Main workflow: Generate webhook, solve problem, and submit solution
     */
    public void executeWorkflow(String name, String regNo, String email) { // ðŸ”¥ pass details dynamically
        try {
            // Step 1: Generate webhook
            WebhookResponse webhookResponse = generateWebhook(name, regNo, email);

            // Step 2: Always solve Question 1
            String sqlSolution = sqlProblemSolver.solveProblem();

            logger.info("Generated SQL solution: {}", sqlSolution);

            // Step 3: Submit solution
            submitSolution(sqlSolution, webhookResponse.getAccessToken(), webhookResponse.getWebhook());

        } catch (Exception e) {
            logger.error("Workflow execution failed: {}", e.getMessage());
        }
    }
}
package com.example.webhookapp.config;

import com.example.webhookapp.service.WebhookService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class StartupRunner implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(StartupRunner.class);

    @Autowired
    private WebhookService webhookService;

    @Override
    public void run(String... args) throws Exception {
        logger.info("Application started - executing webhook workflow");

        // ðŸ”¥ Replace with YOUR details
        String name = "Aditi Parwani";
        String regNo = "0126CS221015";
        String email = "0126CS221015@ORIENTAL.AC.IN";

        webhookService.executeWorkflow(name, regNo, email);

        logger.info("Webhook workflow completed");
    }
}
